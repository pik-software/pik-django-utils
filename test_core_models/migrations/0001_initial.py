# Generated by Django 3.2.13 on 2022-08-10 13:27

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import pik.core.models.fields.inheritance
import pik.core.models.uided
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseArchiveModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BaseModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='M2MFrom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='M2MTo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MyBaseHistorical',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated')),
                ('uid', models.UUIDField(default=pik.core.models.uided._new_uid, editable=False, unique=True)),
                ('version', models.IntegerField(editable=False)),
            ],
            options={
                'ordering': ['created'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MyBasePHistorical',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated')),
                ('uid', models.UUIDField(default=pik.core.models.uided._new_uid, editable=False, primary_key=True, serialize=False)),
                ('version', models.IntegerField(editable=False)),
            ],
            options={
                'ordering': ['created'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MyDated',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MyHistorized',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MyNotSoftDeletedModel',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated')),
                ('uid', models.UUIDField(default=pik.core.models.uided._new_uid, editable=False, primary_key=True, serialize=False)),
                ('version', models.IntegerField(editable=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MyPermanentModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MyPUided',
            fields=[
                ('uid', models.UUIDField(default=pik.core.models.uided._new_uid, editable=False, primary_key=True, serialize=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MySoftDeleteModel',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated')),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted')),
                ('uid', models.UUIDField(default=pik.core.models.uided._new_uid, editable=False, primary_key=True, serialize=False)),
                ('version', models.IntegerField(editable=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MyStrictVersioned',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField(editable=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MyUided',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(default=pik.core.models.uided._new_uid, editable=False, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MyVersioned',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField(editable=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ParentSoftDeleteModel',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated')),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted')),
                ('uid', models.UUIDField(default=pik.core.models.uided._new_uid, editable=False, primary_key=True, serialize=False)),
                ('version', models.IntegerField(editable=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RegularModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(default=pik.core.models.uided._new_uid, editable=False, unique=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RelatedArchiveModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted')),
                ('base', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_core_models.basearchivemodel')),
                ('set_default_base', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, to='test_core_models.basearchivemodel')),
                ('set_null_base', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='test_core_models.basearchivemodel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ChildMySoftDeleteModel',
            fields=[
                ('parent_model', pik.core.models.fields.inheritance.InheritPrimaryUidField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='test_core_models.parentsoftdeletemodel', to_field='uid')),
            ],
            options={
                'abstract': False,
            },
            bases=('test_core_models.parentsoftdeletemodel', models.Model),
        ),
        migrations.CreateModel(
            name='RemovableRegularDepended',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted')),
                ('dependence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_core_models.regularmodel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RemovableNullableDepended',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted')),
                ('dependence', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='test_core_models.mypermanentmodel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RemovableDepended',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dependence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_core_models.mypermanentmodel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RelatedModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_core_models.basearchivemodel')),
                ('set_default_base', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, to='test_core_models.basearchivemodel')),
                ('set_null_base', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='test_core_models.basearchivemodel')),
            ],
        ),
        migrations.CreateModel(
            name='RelatedCousinModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('related', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_core_models.relatedmodel')),
                ('set_default_related', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, to='test_core_models.relatedmodel')),
                ('set_null_related', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='test_core_models.relatedmodel')),
            ],
        ),
        migrations.CreateModel(
            name='RelatedCousinArchiveModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted')),
                ('related', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_core_models.relatedarchivemodel')),
                ('set_default_related', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, to='test_core_models.relatedarchivemodel')),
                ('set_null_related', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='test_core_models.relatedarchivemodel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PermanentM2MThrough',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted')),
                ('m2m_from', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_core_models.m2mfrom')),
                ('m2m_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_core_models.m2mto')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PermanentDepended',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted')),
                ('dependence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_core_models.mypermanentmodel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ParentTypeSoftDeleteModel',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated')),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted')),
                ('uid', models.UUIDField(default=pik.core.models.uided._new_uid, editable=False, primary_key=True, serialize=False)),
                ('version', models.IntegerField(editable=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='parentsoftdeletemodel',
            name='type_model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='test_core_models.parenttypesoftdeletemodel'),
        ),
        migrations.CreateModel(
            name='NullRelatedModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nullable_base', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='test_core_models.basemodel')),
            ],
        ),
        migrations.CreateModel(
            name='NonRemovableNullableDepended',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted')),
                ('dependence', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='test_core_models.mypermanentmodel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NonRemovableDepended',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted')),
                ('dependence', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='test_core_models.mypermanentmodel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MySoftDeletedModelWithFK',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated')),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted')),
                ('uid', models.UUIDField(default=pik.core.models.uided._new_uid, editable=False, primary_key=True, serialize=False)),
                ('version', models.IntegerField(editable=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('not_soft_deleted_fk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_core_models.mynotsoftdeletedmodel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MyRelatedSoftDeletedModel',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated')),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted')),
                ('uid', models.UUIDField(default=pik.core.models.uided._new_uid, editable=False, primary_key=True, serialize=False)),
                ('version', models.IntegerField(editable=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('soft_deleted_fk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_core_models.mysoftdeletemodel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MyRelatedNullableSoftDeletedModel',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated')),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted')),
                ('uid', models.UUIDField(default=pik.core.models.uided._new_uid, editable=False, primary_key=True, serialize=False)),
                ('version', models.IntegerField(editable=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('soft_deleted_fk', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='test_core_models.mysoftdeletemodel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MyRelatedNotSoftDeletedModel',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated')),
                ('uid', models.UUIDField(default=pik.core.models.uided._new_uid, editable=False, primary_key=True, serialize=False)),
                ('version', models.IntegerField(editable=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('soft_deleted_fk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_core_models.mysoftdeletemodel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MyOwned',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='myowneds', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MyNullOwned',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mynullowneds', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='m2mto',
            name='m2m_from',
            field=models.ManyToManyField(through='test_core_models.PermanentM2MThrough', to='test_core_models.M2MFrom'),
        ),
        migrations.CreateModel(
            name='HistoricalParentTypeSoftDeleteModel',
            fields=[
                ('created', models.DateTimeField(blank=True, db_index=True, editable=False, verbose_name='created')),
                ('updated', models.DateTimeField(blank=True, db_index=True, editable=False, verbose_name='updated')),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted')),
                ('uid', models.UUIDField(db_index=True, default=pik.core.models.uided._new_uid, editable=False)),
                ('version', models.IntegerField(editable=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('content_type', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='contenttypes.contenttype')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical parent type soft delete model',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalParentSoftDeleteModel',
            fields=[
                ('created', models.DateTimeField(blank=True, db_index=True, editable=False, verbose_name='created')),
                ('updated', models.DateTimeField(blank=True, db_index=True, editable=False, verbose_name='updated')),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted')),
                ('uid', models.UUIDField(db_index=True, default=pik.core.models.uided._new_uid, editable=False)),
                ('version', models.IntegerField(editable=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('type_model', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='test_core_models.parenttypesoftdeletemodel')),
            ],
            options={
                'verbose_name': 'historical parent soft delete model',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMySoftDeleteModel',
            fields=[
                ('created', models.DateTimeField(blank=True, db_index=True, editable=False, verbose_name='created')),
                ('updated', models.DateTimeField(blank=True, db_index=True, editable=False, verbose_name='updated')),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted')),
                ('uid', models.UUIDField(db_index=True, default=pik.core.models.uided._new_uid, editable=False)),
                ('version', models.IntegerField(editable=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical my soft delete model',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMySoftDeletedModelWithFK',
            fields=[
                ('created', models.DateTimeField(blank=True, db_index=True, editable=False, verbose_name='created')),
                ('updated', models.DateTimeField(blank=True, db_index=True, editable=False, verbose_name='updated')),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted')),
                ('uid', models.UUIDField(db_index=True, default=pik.core.models.uided._new_uid, editable=False)),
                ('version', models.IntegerField(editable=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('not_soft_deleted_fk', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='test_core_models.mynotsoftdeletedmodel')),
            ],
            options={
                'verbose_name': 'historical my soft deleted model with fk',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMyRelatedSoftDeletedModel',
            fields=[
                ('created', models.DateTimeField(blank=True, db_index=True, editable=False, verbose_name='created')),
                ('updated', models.DateTimeField(blank=True, db_index=True, editable=False, verbose_name='updated')),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted')),
                ('uid', models.UUIDField(db_index=True, default=pik.core.models.uided._new_uid, editable=False)),
                ('version', models.IntegerField(editable=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('soft_deleted_fk', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='test_core_models.mysoftdeletemodel')),
            ],
            options={
                'verbose_name': 'historical my related soft deleted model',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMyRelatedNullableSoftDeletedModel',
            fields=[
                ('created', models.DateTimeField(blank=True, db_index=True, editable=False, verbose_name='created')),
                ('updated', models.DateTimeField(blank=True, db_index=True, editable=False, verbose_name='updated')),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted')),
                ('uid', models.UUIDField(db_index=True, default=pik.core.models.uided._new_uid, editable=False)),
                ('version', models.IntegerField(editable=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('soft_deleted_fk', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='test_core_models.mysoftdeletemodel')),
            ],
            options={
                'verbose_name': 'historical my related nullable soft deleted model',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMyRelatedNotSoftDeletedModel',
            fields=[
                ('created', models.DateTimeField(blank=True, db_index=True, editable=False, verbose_name='created')),
                ('updated', models.DateTimeField(blank=True, db_index=True, editable=False, verbose_name='updated')),
                ('uid', models.UUIDField(db_index=True, default=pik.core.models.uided._new_uid, editable=False)),
                ('version', models.IntegerField(editable=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('soft_deleted_fk', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='test_core_models.mysoftdeletemodel')),
            ],
            options={
                'verbose_name': 'historical my related not soft deleted model',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMyNotSoftDeletedModel',
            fields=[
                ('created', models.DateTimeField(blank=True, db_index=True, editable=False, verbose_name='created')),
                ('updated', models.DateTimeField(blank=True, db_index=True, editable=False, verbose_name='updated')),
                ('uid', models.UUIDField(db_index=True, default=pik.core.models.uided._new_uid, editable=False)),
                ('version', models.IntegerField(editable=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical my not soft deleted model',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMyHistorized',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical my historized',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMyBasePHistorical',
            fields=[
                ('created', models.DateTimeField(blank=True, db_index=True, editable=False, verbose_name='created')),
                ('updated', models.DateTimeField(blank=True, db_index=True, editable=False, verbose_name='updated')),
                ('uid', models.UUIDField(db_index=True, default=pik.core.models.uided._new_uid, editable=False)),
                ('version', models.IntegerField(editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical my base p historical',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMyBaseHistorical',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, db_index=True, editable=False, verbose_name='created')),
                ('updated', models.DateTimeField(blank=True, db_index=True, editable=False, verbose_name='updated')),
                ('uid', models.UUIDField(db_index=True, default=pik.core.models.uided._new_uid, editable=False)),
                ('version', models.IntegerField(editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical my base historical',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalChildMySoftDeleteModel',
            fields=[
                ('created', models.DateTimeField(blank=True, db_index=True, editable=False, verbose_name='created')),
                ('updated', models.DateTimeField(blank=True, db_index=True, editable=False, verbose_name='updated')),
                ('deleted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted')),
                ('uid', models.UUIDField(db_index=True, default=pik.core.models.uided._new_uid, editable=False)),
                ('version', models.IntegerField(editable=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('parent_model', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', to='test_core_models.parentsoftdeletemodel')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('type_model', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='test_core_models.parenttypesoftdeletemodel')),
            ],
            options={
                'verbose_name': 'historical child my soft delete model',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
